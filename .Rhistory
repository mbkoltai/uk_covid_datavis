vaccine_folder
ONS_2019_population_estim <- read_csv("ONS_2019_midpoint_population_estim_modified.csv")
ons_all_age_groups_uk_england_2019 <- read_csv("ons_all_age_groups_uk_england_2019.csv")
lapply(c("tidyverse","wesanderson","RcppRoll","scales","lubridate","ungeviz"),library,character.only=TRUE)
# install.packages("wesanderson")
standard_theme=theme(plot.title=element_text(hjust=0.5,size=16),
axis.text.x=element_text(size=13,angle=90,vjust=1/2),axis.text.y=element_text(size=13),
axis.title.x=element_text(size=15),axis.title.y=element_text(size=15),
legend.title=element_text(size=16),legend.text=element_text(size=12)) # text=element_text(family="Calibri")
# panel.grid=element_line(linetype="dashed",colour="black",size=0.1),
### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ###
### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ###
# population data
ONS_2019_population_estim <- read_csv("ONS_2019_midpoint_population_estim_modified.csv")
ons_all_age_groups_uk_england_2019 <- read_csv("ons_all_age_groups_uk_england_2019.csv")
rm(list=ls()); currentdir_path=dirname(rstudioapi::getSourceEditorContext()$path); setwd(currentdir_path)
ONS_2019_population_estim <- read_csv("ONS_2019_midpoint_population_estim_modified.csv")
ons_all_age_groups_uk_england_2019 <- read_csv("ons_all_age_groups_uk_england_2019.csv")
ONS_2019_population_estim
ons_all_age_groups_uk_england_2019
ons_all_age_groups_uk_england_2019
standard_theme
standard_theme=theme(plot.title=element_text(hjust=0.5,size=16),
axis.text.x=element_text(size=13,angle=90,vjust=1/2),axis.text.y=element_text(size=13),
axis.title.x=element_text(size=15),axis.title.y=element_text(size=15),
legend.title=element_text(size=16),legend.text=element_text(size=12)) # text=element_text(family="Calibri")
getwd()
url_cases_age="https://api.coronavirus.data.gov.uk/v2/data?areaType=region&areaCode=E12000007&metric=newCasesBySpecimenDateAgeDemographics&format=csv"
# c(1:5,6:9,10:14,15:19)
eng_case_age_data <- read_csv(url_cases_age)
eng_case_age_data <- eng_case_age_data %>% filter(!age %in% c("unassigned","00_59","60+")) %>%
mutate(age_num=as.numeric(factor(age)),
age_categ=case_when(age_num<=5 ~ "0-24",age_num>=6&age_num<=10 ~ "25-49",
age_num>=11 & age_num<=15 ~ "50-74", age_num>15 ~ "75+"),
age_num=age_num-(as.numeric(factor(age_categ))-1)*5) %>%  group_by(age) %>%
mutate(rollingsum_chng=rollingSum/lag(rollingSum,n=7,order_by=date))
agegr_names=gsub("09","9",gsub("04","4",gsub("^0","",gsub("_","-",unique(eng_case_age_data$age)))))
l_num=lapply(1:4, function(x) (x-1)*5+1:5); l_num[[4]]=l_num[[4]][1:4];
agegr_names=paste0(unlist(lapply(l_num, function(x)
paste0("[",paste0(agegr_names[x],collapse=","),"]"))),collapse=", ")
# PLOT CHANGE in RATES
start_date<-as.Date("2021-09-01")
ggplot(eng_case_age_data %>% filter(date>start_date),
aes(x=date,y=(rollingsum_chng),color=factor(age_num),group=age_num)) + # -1)*100 # log2
geom_line() + geom_point(size=3/4,shape=21,fill=NA) + facet_wrap(~age_categ) + # ,scales="free_y") + #
geom_hline(yintercept=1,linetype="dashed",size=1/2) +
scale_x_date(expand=expansion(0.01,0),breaks="week") + scale_y_continuous(breaks=c(1/4,1/3,1/2,1,1.5,2,2.5,3,4)) + #
labs(color="5-year age bands within age groups",caption=paste0("agegroups: ",gsub("\\], ","\\]\n",agegr_names))) +
xlab("") + ylab("ratio of weekly rolling sum to a week ago") +
theme_bw() + standard_theme + theme(axis.text.x=element_text(size=12),axis.text.y=element_text(size=12),
strip.text=element_text(size=16),legend.title=element_text(size=15),legend.text=element_text(size=13),
legend.position="bottom",plot.caption=element_text(size=13),panel.grid.minor.y=element_blank())
# save
ggsave(paste0("london/england_cases_age_4groups_rollingsum_change.png"),width=34,height=22,units="cm")
ons_all_age_groups_uk_england_2019 <- read_csv("ons_all_age_groups_uk_england_2019.csv")
ons_all_age_groups_uk_england_2019
ONS_2019_population_estim <- read_csv("ONS_2019_midpoint_population_estim_modified.csv")
ons_all_age_groups_uk_england_2019 <- read_csv("ons_all_age_groups_uk_england_2019.csv")
ONS_2019_population_estim
left_join(read_csv(url_data),ONS_2019_population_estim %>% #  %>% select(!contains("UK"))
rename(population=England),by="age")
url_data<-
"https://api.coronavirus.data.gov.uk/v2/data?areaType=region&areaCode=E12000007&metric=vaccinationsAgeDemographics&format=csv"
left_join(read_csv(url_data),ONS_2019_population_estim %>% #  %>% select(!contains("UK"))
rename(population=England),by="age")
ONS_2019_population_estim %>%
select(!contains("London")) %>% rename(population=England)
ONS_2019_population_estim %>%
select(!contains("London"))
ONS_2019_population_estim %>%
select(c(age,London))
ONS_2019_population_estim %>% %>% select(!contains("UK"|"London")
ONS_2019_population_estim %>% select(!contains("UK"|"London"))
ONS_2019_population_estim %>% select(!contains(c("UK","London")))
ons_all_age_groups_uk_england_2019
ons_all_age_groups_uk_england_2019 %>% select(!c(UK,London))
hosp_url<-"https://api.coronavirus.data.gov.uk/v2/data?areaType=region&areaCode=E12000007&metric=cumAdmissionsByAge&format=csv"
eng_hosp_age_data <- read_csv(hosp_url) %>% group_by(age) %>%
mutate(`new admissions`=roll_mean(value-lag(value,n=1,order_by=date),n=7,align="center",fill=NA),
rate_chng=rate-lag(rate,n=1,order_by=date),
rate_chng_smooth=roll_mean(rate_chng,n=7,align="center",fill=NA),
age=factor(age,levels=c("0_to_5", "6_to_17","18_to_64","65_to_84","85+")))
death_url<-"https://api.coronavirus.data.gov.uk/v2/data?areaType=region&areaCode=E12000007&metric=newDeaths28DaysByDeathDateAgeDemographics&format=csv"
deaths_age<-read_csv(death_url) %>% group_by(age) %>%
mutate(rolling_rate_per_alldeaths=roll_mean(deaths,n=7,align="center",fill=NA)) %>% ungroup()
df_deaths <- left_join(deaths_age,ons_all_age_groups_uk_england_2019 %>% select(!c(UK,England)),by="age") %>%
rename(population=London) %>% mutate(age_uplim=as.numeric(gsub("^.*_","",age)),
age_grp=ifelse(age_uplim<=49,"00_49",ifelse(age_uplim>=49&age_uplim<=59,"50_59",age)),
age_grp=ifelse(grepl("\\+",age),age,age_grp)) %>% filter(!age %in% c("00_59","60+")) %>%
group_by(age_grp,date) %>%
summarise(rollingSum=sum(rollingSum),population=sum(population)) %>% ungroup() %>%
mutate(agegrp_no=as.numeric(factor(age_grp)),meta_age=ifelse(agegrp_no==1,1, ceiling((agegrp_no+1)/2))) %>%
group_by(date,meta_age) %>%
summarise(rollingSum=sum(rollingSum),population=sum(population),min_age=unique(age_grp)[1],
max_age=ifelse(agegrp_no==1,unique(age_grp)[1],unique(age_grp)[2])) %>%
mutate(age_grp=paste0(substr(min_age,1,3),gsub("_","",substr(max_age,nchar(max_age)-2,nchar(max_age)))),
rollingRate=1e6*rollingSum/(7*population))
# plot DEATHS in 10-yr groups
plot_settings<-expand.grid(list(c("log","linear"),c("fixed","free"),c("nofacet","facet"))) %>%
rename(y_scale=Var1,y_range=Var2,faceting=Var3) %>% filter(!(faceting=="nofacet" & y_range=="fixed"))
start_dates <- c("2020-12-01","2021-07-01")
# LOOP
for (k_start in start_dates) {
for (k_set in 1:nrow(plot_settings)) {
p <- ggplot(df_deaths %>% filter(date>as.Date(k_start)),
aes(x=date,y=rollingRate,color=age_grp)) + geom_line(size=1.1) +
scale_x_date(expand=expansion(0.02,0),date_breaks="1 month") +
theme_bw() + standard_theme + theme(strip.text=element_text(size=14),panel.grid.minor.y=element_blank()) +
xlab("") + ylab("7-day average of deaths per million population")
if (plot_settings[k_set,1]=="log") {
log_breaks <- 2^(-3:8); if (k_set==5 & k_start>ymd("2021-01-01")) {log_breaks=round(2^seq(-4.5,8,by=1/2),3) }
p<-p+scale_y_log10(expand=expansion(0.03,0), breaks=log_breaks )
} else {
p <- p + scale_y_continuous() }
if (plot_settings[k_set,3]=="facet"){
if (plot_settings[k_set,2]=="fixed") { p<-p+facet_wrap(~age_grp,scales="fixed") } else {
p <- p + facet_wrap(~age_grp,scales="free_y") }}
p
# save
foldername<-paste0("london/cases_hosp_deaths_from_",gsub("-","_",as.character(k_start)),"/")
if (!dir.exists(foldername)) {dir.create(foldername)}
filename<-paste0("london_deaths_by_age_lineplot",
ifelse(grepl("log",p$scales$scales[[2]]$trans$name),"_log","_linear"),
ifelse(class(p$facet)[1]=="FacetNull","_nofacet",""),
ifelse(plot_settings[k_set,2]=="fixed","_yfixed",""),".png")
ggsave(paste0(foldername,filename),width=34,height=22,units="cm")
print(paste0(filename," (",k_start,")"))
}
}
cumul_deaths <- deaths_age %>% mutate(age_uplim=as.numeric(gsub("^.*_","",age)),
age_grp=ifelse(age_uplim<=49,"00_49",ifelse(age_uplim>=49&age_uplim<=59,"50_59",age)),
age_grp=ifelse(grepl("\\+",age),age,age_grp)) %>% filter(!age %in% c("00_59","60+")) %>%
filter(age_grp %in% c("00_49","50_59","60_64","65_69","70_74","75_79","80_84","85_89","90+")) %>%
group_by(age_grp,date) %>%
summarise(deaths=sum(deaths),
rolling_rate_per_alldeaths=sum(rolling_rate_per_alldeaths),rollingSum=sum(rollingSum)) %>%
rename(age=age_grp) %>% group_by(age) %>%
summarise(sum_deaths=sum(deaths)) %>% mutate(share_deaths=sum_deaths/sum(sum_deaths)) %>%
pivot_longer(!age) %>% mutate(age=factor(age,unique(age)),age_num=as.numeric(rev(age)))
df_cumuldeath <- cumul_deaths %>%
mutate(lower_lim=gsub("00","0",gsub("_[0-9]+","+",as.character(age)))) %>%
group_by(name,age_num) %>% group_by(name) %>% arrange(age_num) %>%
mutate(cum_sum=round(cumsum(value),3), value_str=ifelse(name %in% "share_deaths",
paste0(100*round(value,3),"% (",lower_lim,": ",100*cum_sum,"%)"),
paste0(round(value/1e3,1),"e3")) ) %>%
mutate(name=ifelse(name %in% "share_deaths","% of all deaths","number of deaths"))
# plot
ggplot(df_cumuldeath) + geom_bar(aes(x=1,y=ifelse(value<1,round(value*1e2,1),value),fill=age),
color="black",position="stack",stat="identity") +
geom_text(aes(x=1,y=ifelse(value<1,round(value*1e2,1),value),label=value_str),size=4,position=position_stack(vjust=0.5)) +
facet_wrap(~name,scales="free") + standard_theme + theme_bw() + xlab("") + ylab("% of all deaths") +
scale_x_continuous(expand=expansion(0.1,0)) + scale_y_continuous(expand=expansion(0.001,0)) +
theme(axis.ticks.x=element_blank(),axis.text.x=element_blank(),strip.text=element_text(size=15),
axis.text.y=element_text(size=15),axis.title.y=element_text(size=15))
# save
ggsave(paste0("london/cumul_deaths_by_age.png"),width=18,height=22,units="cm") # _ylog
#
unlink("Rplots.pdf")
toupper("hospital admissions")
hosp_url<-"https://api.coronavirus.data.gov.uk/v2/data?areaType=nhsRegion&areaCode=E40000003&metric=cumAdmissionsByAge&format=csv"
# "https://api.coronavirus.data.gov.uk/v2/data?areaType=region&areaCode=E12000007&metric=cumAdmissionsByAge&format=csv"
lnd_hosp_age_data <- read_csv(hosp_url) %>% group_by(age) %>%
mutate(`new admissions`=roll_mean(value-lag(value,n=1,order_by=date),n=7,align="center",fill=NA),
rate_chng=rate-lag(rate,n=1,order_by=date),
rate_chng_smooth=roll_mean(rate_chng,n=7,align="center",fill=NA),
age=factor(age,levels=c("0_to_5", "6_to_17","18_to_64","65_to_84","85+")))
for (k_start in start_dates) {
for (k_set in 1:nrow(plot_settings)) {
p<-ggplot(lnd_hosp_age_data %>% filter(date>as.Date(k_start)),
aes(x=date,y=rate_chng_smooth*10,color=age)) + geom_line(size=1.3) +
# geom_hline(aes(yintercept=max(rate_chng_smooth)),color="red") +
scale_x_date(expand=expansion(0.02,0),date_breaks="1 month") +
xlab("") + ylab("7-day average of admissions per MILLION population") +
theme_bw() + standard_theme + theme(strip.text=element_text(size=14),panel.grid.minor.y=element_blank()); p
if (plot_settings[k_set,1]=="log") {
log_breaks <- 2^(-4:10); if (k_set==5 & k_start>ymd("2021-01-01")) {log_breaks=round(2^seq(-4,10,by=1/2),1) }
p<-p+scale_y_log10(expand=expansion(0.03,0), breaks=log_breaks) } else {
p <- p + scale_y_continuous() }
# sapply(seq(-2,4,1/2),function(x) round(10^x,ifelse(x<0,round(x+3),1)))
if (plot_settings[k_set,3]=="facet"){
if (plot_settings[k_set,2]=="fixed") { p<-p+facet_wrap(~age,scales="fixed") } else {
p <- p + facet_wrap(~age,scales="free_y") }}
p; print(plot_settings[k_set,])
# SAVE
foldername<-paste0("london/cases_hosp_deaths_from_",gsub("-","_",as.character(k_start)),"/")
if (!dir.exists(foldername)) {dir.create(foldername)}
filename<-paste0("london_admissions_by_age",
ifelse(grepl("log",p$scales$scales[[2]]$trans$name),"_log","_linear"),
ifelse(class(p$facet)[1]=="FacetNull","_nofacet",""),
ifelse(plot_settings[k_set,2]=="fixed","_yfixed",""), ".png")
ggsave(paste0(foldername,filename),width=34,height=22,units="cm")
}
}
